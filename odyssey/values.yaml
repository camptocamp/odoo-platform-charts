# For all odyssey config, please check https://github.com/yandex/odyssey/blob/master/odyssey.conf
# Deployment values for pgbouncer
replicaCount: 1
internalPort: 5432
servicePort: 5432
imagePullSecrets:
  - name: github-packages

service:
  enabled: true
  type: ClusterIP
  annotations: {}
  name: null

certificate:
  enabled: true
  secretName: odyssey-tls
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: letsencrypt-staging
  dnsNames:
    - pg.example.com

metrics:
  scrapeInterval: 15s


# extra volumes for deployment
volumes: []
# extra volumes mounts for deployment
volumeMounts: []

image:
  repository: ghcr.io/camptocamp/odyssey
  tag: latest
  pullPolicy: Always

additionalAnnotations: {}
additionalLabels: {}
spec:
  annotations: {}

nodeSelector: {}

resources: {}

# Custom odyssey.conf
settings:
  databases_list: {}
  globals:
    #
    # Start as a daemon.
    #
    # By default Odyssey does not run as a daemon. Set to 'yes' to enable.
    #
    daemonize: "no"


    #
    # Directory to place odyssey internal-used locks
    # Odyssey will use /tmp by default
    #


    ###
    ### LOGGING
    ###

    #
    # Log text format.
    #
    # Odyssey allows to configure log text format. This could be useful to
    # support external log parser format. Format string can contain plain
    # text, escape symbols and format flags.
    #
    # Supported flags:
    #
    # %n = unixtime
    # %t = timestamp with date
    # %p = process ID
    # %i = client ID
    # %s = server ID
    # %u = user name
    # %d = database name
    # %c = context
    # %l = level (error, warning, debug)
    # %m = message
    # %M = message tskv
    # %r = client port
    # %h = client host
    #
    log_format: "%p %t %l [%i %s] (%c) %m \\n"

    #
    # Log to stdout.
    #
    # Set to 'yes' if you need to additionally display log output in stdout.
    # Enabled by default.
    #
    log_to_stdout: "yes"

    #
    # Log to system logger.
    #
    # To enable syslog(3) usage, set log_syslog to 'yes'. Additionally set
    # log_syslog_ident and log_syslog_facility.
    #
    log_syslog: "no"
    #log_syslog_ident: "odyssey"
    #log_syslog_facility: "daemon"

    #
    # Verbose logging.
    #
    # Enable verbose logging of all events, which will generate a log of
    # detailed information useful for development or testing.
    #
    # It is also possible to enable verbose logging for specific users
    # (see routes section).
    #
    log_debug: "no"

    #
    # Log configuration.
    #
    # Write configuration to the log during start and config reload.
    #
    log_config: "yes"

    #
    # Log session events.
    #
    # Write client connect and disconnect events to the log.
    #
    log_session: "yes"

    #
    # Log client queries.
    #
    # Write client queries text to the log. Disabled by default.
    #
    log_query: "no"

    #
    # Log client statistics.
    #
    # Periodically display information about active routes.
    #
    log_stats: "no"

    #
    # Statistics update inverval.
    #
    # Set interval in seconds for internal statistics update and log report.
    #
    stats_interval: 60


    ###
    ### PERFORMANCE
    ###

    #
    # Worker threads.
    #
    # Set size of thread pool used for client processing.
    #
    #  1: By default, Odyssey runs with a single worker. This is a special
    #  mode optimized for general use. This mode also made to reduce multi-thread
    #  communication overhead.
    #
    #  N: Add additional worker threads, if your server experience heavy load,
    #  especially using TLS setup.
    #
    workers: 1

    #
    # Resolver threads.
    #
    # Number of threads used for DNS resolving. This value can be increased, if
    # your server experience a big number of connecting clients.
    #
    resolvers: 1

    #
    # IO Readahead.
    #
    # Set size of per-connection buffer used for io readahead operations.
    #
    readahead: 8192

    #
    # Coroutine cache size.
    #
    # Set pool size of free coroutines cache. It is a good idea to set
    # this value to a sum of max clients plus server connections. Please note, that
    # each coroutine consumes around `coroutine_stack_size` of memory.
    #
    # Set to zero, to disable coroutine cache.
    #
    cache_coroutine: 0

    #
    # Coroutine stack size.
    #
    # Set coroutine stack size in pages. In some rare cases
    # it might be necessary to make stack size bigger. Actual stack will be
    # allocated as (`coroutine_stack_size` + 1_guard_page) * page_size.
    # Guard page is used to track stack overflows.
    #
    # 16KB by default.
    #
    coroutine_stack_size: 8

    #
    # TCP nodelay.
    #
    # Set to 'yes', to enable nodelay.
    #
    nodelay: "yes"

    ###
    ### GLOBAL LIMITS
    ###

    #
    # Global limit of client connections.
    #
    # Comment 'client_max' to disable the limit. On client limit reach, Odyssey will
    # reply with 'too many connections'.
    #
    client_max: 1000

    #
    # Global limit of client connections concurrently being routed.
    # Client connection is being routed after it is accepted and until it's startup
    # message is read and connection is assigned route to the database. Most of the
    # routing time is occupied with TLS handshake.
    #
    # Unset or zero 'client_max_routing' will set it's value equal to 16 * workers
    #
    client_max_routing: 32

    #
    # If server responds with "Too many clients" client will wait for server_login_retry milliseconds.
    #
    # server_login_retry
    #
    # 1 by default.

    ###
    ### LISTEN
    ###

    #
    # Listen section defines listening servers used for accepting
    # incoming client connections.
    #
    # It is possible to define several Listen sections. Odyssey will listen on
    # every specified address port and can use separate TLS settings.
    #
    # Odyssey will fail in case it could not bind on any resolved address.
    #

    #listen:
    #Bind address.
    #host: "*"
    #Listen port.
    #port: 5432
    #TCP listen backlog.
    #backlog: 128
    #TLS support.
    #Supported TLS modes:
    #"disable"     - disable TLS protocol
    #"allow"       - switch to TLS protocol on request
    #"require"     - TLS clients only
    #"verify_ca"   - require valid client certificate
    #"verify_full" - require valid client certificate
    #tls: "allow"
    #tls_ca_file: ""
    #tls_key_file: ""
    #tls_cert_file: ""
    #tls_protocols: ""
  ###
  ### ROUTING
  ###

  #
  # Odyssey allows to define client routing rules by specifying
  # 'database', 'user' and 'storage' sections.
  #
  # On client accept appropriate route is assigned by matching 'database' and
  # 'user' sections, all requests then forwarded to a 'storage'
  # (which is referenced from the 'user' section).
  #
  # Database <name> | default.
  #
  # Defines database name requested by client. Each 'database' section structure
  # consist of a 'user' subsections.
  #
  # A special 'database default' is used, in case when no database is matched.
  #
  # User <name> | default.
  #
  # Defines authentication, pooling and storage settings for
  # requested route.
  #
  # A special 'user default' is used, in case when no user is matched.
  #
  # Storage <name>.
  #
  # Defines server used as a data storage or admin console operations.
  #
  #storages:
  #  postgresql:
      #Storage type.
      #"remote" - PostgreSQL server
      #"local"  - Odyssey (admin console)
  #    type: "remote"
      #Remote server address.
      #If host is not set, Odyssey will try to connect using UNIX socket if
      #unix_socket_dir is set.
  #    host: "localhost"
      #Remote server port.
  #    port: 5432
      #Remote server TLS settings.
  #    tls: "allow"
  #    tls_ca_file: ""
  #    tls_key_file: ""
  #    tls_cert_file: ""
  #    tls_protocols: ""
      # Global limit of server connections concurrently being routed.
      # We are opening no more than server_max_routing server connections concurrently.
      # Unset or zero 'server_max_routing' will set it's value equal to number of workers
  #    server_max_routing: 4

  #databases_default_value:
    #Authentication method password.
    #Depending on selected method, password can be in plain text or md5 hash.
    #Comment 'client_max' to disable the limit. On client limit reach, Odyssey will
    #reply with 'too many connections'.
    #client_max: 100
    #Remote server to use.
    #By default route database and user names are used as connection
    #parameters to remote server. It is possible to override this values
    #by specifying 'storage_db' and 'storage_user'. Remote server password
    #can be set using 'storage_password' field.
#    storage: "postgres_server"
    #storage_db "database"
    #storage_user "test"
    #storage_password "test"
    #Remote server auth
#    password_passthrough: "yes"
    #By default odyssey authenticate users itself, but if side auth application is used,
    #like LDAP server, PAM module, or custom auth module, sometimes,
    #instead of configuring storage_password, it is more convenient to reuse
    #client-provided password to perform backend auth. If you set this option to "yes"
    #Odyssey will store client token and use when new server connection is Opened. Anyway, if
    #you configure storage_password for route, password_passthrough is essentially ignored
    #Server pool mode.
    #"session"     - assign server connection to a client until it disconnects
    #"transaction" - assign server connection to a client during a transaction lifetime
    #pool: "transaction"
    #Server pool size.
    #Keep the number of servers in the pool as much as 'pool_size'.
    #Clients are put in a wait queue, when all servers are busy.
    #Set to zero to disable the limit.
